import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Date;

public class App {
    public static class   MainFrame extends JFrame {
        private Connection connection;

        public MainFrame() {
            setTitle("Hostel Management System");
            setSize(500, 400);
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setLocationRelativeTo(null);

            // Initialize the database connection
            try {
                connection = DriverManager.getConnection(
                        "jdbc:mysql://localhost:3306/hostel_management", "root", "12345678");
                System.out.println("Connected to the database successfully!");
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database connection failed: " + e.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
                System.exit(1);
            }

            // Set up the layout
            setLayout(new GridLayout(4, 1, 10, 10));

            // Add buttons for each action
            JButton viewRoomsButton = new JButton("View All Rooms");
            JButton checkAvailabilityButton = new JButton("Check Room Availability");
            JButton bookRoomButton = new JButton("Book a Room");
            JButton cancelBookingButton = new JButton("Cancel a Booking");

            // Add action listeners for buttons
            viewRoomsButton.addActionListener(e -> viewAllRooms());
            checkAvailabilityButton.addActionListener(e -> checkRoomAvailability());
            bookRoomButton.addActionListener(e -> bookRoom());
            cancelBookingButton.addActionListener(e -> cancelBooking());

            // Add buttons to the frame
            add(viewRoomsButton);
            add(checkAvailabilityButton);
            add(bookRoomButton);
            add(cancelBookingButton);
        }

        private void viewAllRooms() {
            // Implement the code to retrieve and display room details
            try (var stmt = connection.createStatement();
                 var rs = stmt.executeQuery("SELECT * FROM Room")) {

                StringBuilder roomList = new StringBuilder("Room List:\n");
                while (rs.next()) {
                    roomList.append("ID: ").append(rs.getInt("room_id"))
                            .append(", Type: ").append(rs.getString("room_type"))
                            .append(", Status: ").append(rs.getString("status"))
                            .append(", Price: $").append(rs.getDouble("price"))
                            .append("\n");
                }
                JOptionPane.showMessageDialog(this, roomList.toString(),
                        "View All Rooms", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error retrieving rooms: " + e.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

        private void checkRoomAvailability() {
            String roomType = JOptionPane.showInputDialog(this, "Enter room type (e.g., Single, Double):");

            if (roomType != null && !roomType.isEmpty()) {
                String query = "SELECT * FROM Room WHERE room_type = ? AND status = 'Available' LIMIT 1";
                try (var stmt = connection.prepareStatement(query)) {
                    stmt.setString(1, roomType);
                    var rs = stmt.executeQuery();

                    if (rs.next()) {
                        String message = "Available Room:\nID: " + rs.getInt("room_id") +
                                         ", Type: " + rs.getString("room_type") +
                                         ", Price: $" + rs.getDouble("price");
                        JOptionPane.showMessageDialog(this, message,
                                "Room Availability", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "No available rooms of type: " + roomType,
                                "Room Availability", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Error checking availability: " + e.getMessage(),
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }

        private void bookRoom() {
            String guestName = JOptionPane.showInputDialog(this, "Enter guest name:");
            String roomType = JOptionPane.showInputDialog(this, "Enter room type to book (e.g., Single, Double):");

            if (guestName != null && roomType != null && !guestName.isEmpty() && !roomType.isEmpty()) {
                String findRoomQuery = "SELECT * FROM Room WHERE room_type = ? AND status = 'Available' LIMIT 1";
                String updateRoomQuery = "UPDATE Room SET status = 'Booked' WHERE room_id = ?";
                String insertBookingQuery = "INSERT INTO Booking (room_id, guest_name, check_in_date, check_out_date) VALUES (?, ?, ?, ?)";

                try (var findRoomStmt = connection.prepareStatement(findRoomQuery);
                     var updateRoomStmt = connection.prepareStatement(updateRoomQuery);
                     var insertBookingStmt = connection.prepareStatement(insertBookingQuery)) {

                    findRoomStmt.setString(1, roomType);
                    var rs = findRoomStmt.executeQuery();

                    if (rs.next()) {
                        int roomId = rs.getInt("room_id");

                        String checkInDate = JOptionPane.showInputDialog(this, "Enter check-in date (YYYY-MM-DD):");
                        String checkOutDate = JOptionPane.showInputDialog(this, "Enter check-out date (YYYY-MM-DD):");

                        updateRoomStmt.setInt(1, roomId);
                        updateRoomStmt.executeUpdate();

                        insertBookingStmt.setInt(1, roomId);
                        insertBookingStmt.setString(2, guestName);
                        insertBookingStmt.setDate(3, Date.valueOf(checkInDate));
                        insertBookingStmt.setDate(4, Date.valueOf(checkOutDate));
                        insertBookingStmt.executeUpdate();

                        JOptionPane.showMessageDialog(this, "Room booked successfully for " + guestName,
                                "Booking Confirmation", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "No available rooms of type: " + roomType,
                                "Booking Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Error booking room: " + e.getMessage(),
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }

        private void cancelBooking() {
            String bookingIdInput = JOptionPane.showInputDialog(this, "Enter booking ID to cancel:");

            if (bookingIdInput != null && !bookingIdInput.isEmpty()) {
                int bookingId = Integer.parseInt(bookingIdInput);

                String getBookingQuery = "SELECT * FROM Booking WHERE booking_id = ?";
                String deleteBookingQuery = "DELETE FROM Booking WHERE booking_id = ?";
                String updateRoomStatusQuery = "UPDATE Room SET status = 'Available' WHERE room_id = ?";

                try (var getBookingStmt = connection.prepareStatement(getBookingQuery);
                     var deleteBookingStmt = connection.prepareStatement(deleteBookingQuery);
                     var updateRoomStatusStmt = connection.prepareStatement(updateRoomStatusQuery)) {

                    getBookingStmt.setInt(1, bookingId);
                    var rs = getBookingStmt.executeQuery();

                    if (rs.next()) {
                        int roomId = rs.getInt("room_id");

                        deleteBookingStmt.setInt(1, bookingId);
                        deleteBookingStmt.executeUpdate();

                        updateRoomStatusStmt.setInt(1, roomId);
                        updateRoomStatusStmt.executeUpdate();

                        JOptionPane.showMessageDialog(this, "Booking canceled successfully.",
                                "Cancellation Confirmation", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "Booking ID not found.",
                                "Cancellation Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Error canceling booking: " + e.getMessage(),
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }

        public static void main(String[] args) {
            SwingUtilities.invokeLater(() -> {
                MainFrame mainFrame = new MainFrame();
                mainFrame.setVisible(true);
            });
        }
    }
}
